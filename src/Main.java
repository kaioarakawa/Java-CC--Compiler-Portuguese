/* Generated By:JavaCC: Do not edit this line. Main.java */
import java.io.FileInputStream;
import java.io.File;
import java.io.IOException;

public class Main implements MainConstants {
        public static void main(String args []) throws ParseException{
                try{
                        System.out.println("Lendo arquivo fonte...");
                        FileInputStream fis = new FileInputStream(new File("..//izi-lang//src//fonte.txt"));
                        Main parser = new Main(fis);
                        parser.Start();
                        System.out.println("Arquivo fonte processado corretamente!");
                }
                catch (IOException e){
                        System.out.println("Falha ao abrir arquivo fonte.");
                        System.exit(0);
                }
        }

// ======== FUNÇÕES =========== //

//Execucao do parser
  final public void Start() throws ParseException {
    trace_call("Start");
    try {
      COMANDOS();
      jj_consume_token(0);
    } finally {
      trace_return("Start");
    }
  }

//Função para todos os comandos possíveis
  final public void COMANDOS() throws ParseException {
    trace_call("COMANDOS");
    try {
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMENTARIO:
        case VAR:
        case IF:
        case WHILE:
        case SWITCH:
        case CASE:
        case FOR:
        case FUNCTION:
        case FOPEN:
        case ECO:
        case AST:
        case ARR:
        case COUNTS:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case WHILE:
          WHILE();
          break;
        case AST:
          OUT();
          break;
        case ECO:
          IN();
          break;
        case IF:
          IF();
          break;
        case VAR:
          ID();
          break;
        case FOR:
          FOR();
          break;
        case COUNTS:
          EXPA();
          break;
        case SWITCH:
          SWITCH();
          break;
        case CASE:
          CASE();
          break;
        case COMENTARIO:
          COMENTARIO();
          break;
        case ARR:
          CALLF();
          break;
        case FUNCTION:
          FUNCTION();
          break;
        case FOPEN:
          FOPEN();
          break;
        default:
          jj_la1[1] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
      trace_return("COMANDOS");
    }
  }

//Função para comentarios
  final public void COMENTARIO() throws ParseException {
    trace_call("COMENTARIO");
    try {
      jj_consume_token(COMENTARIO);
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LITERALS:
          ;
          break;
        default:
          jj_la1[2] = jj_gen;
          break label_2;
        }
        jj_consume_token(LITERALS);
      }
      jj_consume_token(COMENTARIO);
    } finally {
      trace_return("COMENTARIO");
    }
  }

//Funcoes para atribuicao
  final public void ID() throws ParseException {
    trace_call("ID");
    try {
      jj_consume_token(VAR);
      jj_consume_token(TIPO);
      jj_consume_token(LITERALS);
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VIRG:
        case TO:
          ;
          break;
        default:
          jj_la1[3] = jj_gen;
          break label_3;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VIRG:
          jj_consume_token(VIRG);
          IDR();
          break;
        case TO:
          jj_consume_token(TO);
          IDIR();
          break;
        default:
          jj_la1[4] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(EOL);
    } finally {
      trace_return("ID");
    }
  }

  final public void IDR() throws ParseException {
    trace_call("IDR");
    try {
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LITERALS:
          jj_consume_token(LITERALS);
          break;
        case VIRG:
          jj_consume_token(VIRG);
          IDR();
          break;
        default:
          jj_la1[5] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VIRG:
        case LITERALS:
          ;
          break;
        default:
          jj_la1[6] = jj_gen;
          break label_4;
        }
      }
    } finally {
      trace_return("IDR");
    }
  }

  final public void IDIR() throws ParseException {
    trace_call("IDIR");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VALUES:
        jj_consume_token(VALUES);
        break;
      case TF:
        jj_consume_token(TF);
        break;
      case NUM:
        jj_consume_token(NUM);
        break;
      case TEIA:
        jj_consume_token(TEIA);
        label_5:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case VIRG:
            ;
            break;
          default:
            jj_la1[7] = jj_gen;
            break label_5;
          }
          jj_consume_token(VIRG);
          jj_consume_token(LITERALS);
          jj_consume_token(TO);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case VALUES:
            jj_consume_token(VALUES);
            break;
          case TF:
            jj_consume_token(TF);
            break;
          case NUM:
            jj_consume_token(NUM);
            break;
          case TEIA:
            jj_consume_token(TEIA);
            break;
          default:
            jj_la1[8] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("IDIR");
    }
  }

//Função para operações aritmeticas
  final public void EXPA() throws ParseException {
    trace_call("EXPA");
    try {
      jj_consume_token(COUNTS);
      jj_consume_token(LITERALS);
      jj_consume_token(TO);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VALUES:
        jj_consume_token(VALUES);
        break;
      case NUM:
        jj_consume_token(NUM);
        break;
      case LITERALS:
        jj_consume_token(LITERALS);
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OPA:
          ;
          break;
        default:
          jj_la1[11] = jj_gen;
          break label_6;
        }
        jj_consume_token(OPA);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VALUES:
          jj_consume_token(VALUES);
          break;
        case NUM:
          jj_consume_token(NUM);
          break;
        case LITERALS:
          jj_consume_token(LITERALS);
          break;
        default:
          jj_la1[12] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(EOL);
    } finally {
      trace_return("EXPA");
    }
  }

//Função para operações booleanas
  final public void EXPB() throws ParseException {
    trace_call("EXPB");
    try {
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUM:
        case LITERALS:
        case VALUES:
          ;
          break;
        default:
          jj_la1[13] = jj_gen;
          break label_7;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VALUES:
          jj_consume_token(VALUES);
          break;
        case NUM:
          jj_consume_token(NUM);
          break;
        case LITERALS:
          jj_consume_token(LITERALS);
          break;
        default:
          jj_la1[14] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(OPB);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VALUES:
          jj_consume_token(VALUES);
          break;
        case NUM:
          jj_consume_token(NUM);
          break;
        case LITERALS:
          jj_consume_token(LITERALS);
          break;
        default:
          jj_la1[15] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
      trace_return("EXPB");
    }
  }

//Funções para criação do for
  final public void FOR() throws ParseException {
    trace_call("FOR");
    try {
      jj_consume_token(FOR);
      jj_consume_token(PAR_A);
      ID();
      EXPB();
      jj_consume_token(VIRG);
      EXPA();
      jj_consume_token(PAR_F);
      jj_consume_token(CHA_A);
      COMANDOS();
      jj_consume_token(CHA_F);
    } finally {
      trace_return("FOR");
    }
  }

//Funções para a estrutura if
  final public void IFE() throws ParseException {
    trace_call("IFE");
    try {
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PAR_A:
          ;
          break;
        default:
          jj_la1[16] = jj_gen;
          break label_8;
        }
        jj_consume_token(PAR_A);
        EXPB();
        jj_consume_token(PAR_F);
        jj_consume_token(CHA_A);
        COMANDOS();
        jj_consume_token(CHA_F);
      }
    } finally {
      trace_return("IFE");
    }
  }

  final public void IF() throws ParseException {
    trace_call("IF");
    try {
      jj_consume_token(IF);
      IFE();
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ELIF:
          ;
          break;
        default:
          jj_la1[17] = jj_gen;
          break label_9;
        }
        jj_consume_token(ELIF);
        IFE();
      }
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ELSE:
          ;
          break;
        default:
          jj_la1[18] = jj_gen;
          break label_10;
        }
        jj_consume_token(ELSE);
        jj_consume_token(CHA_A);
        COMANDOS();
        jj_consume_token(CHA_F);
      }
    } finally {
      trace_return("IF");
    }
  }

//Funções para entrada de dados
  final public void IN() throws ParseException {
    trace_call("IN");
    try {
      jj_consume_token(ECO);
      jj_consume_token(LITERALS);
      jj_consume_token(TO);
      jj_consume_token(IN);
      jj_consume_token(PAR_A);
      jj_consume_token(TIPO);
      jj_consume_token(PAR_F);
      jj_consume_token(EOL);
    } finally {
      trace_return("IN");
    }
  }

//Funções para entrada de dados
  final public void OUT() throws ParseException {
    trace_call("OUT");
    try {
      jj_consume_token(AST);
      jj_consume_token(OUT);
      jj_consume_token(PAR_A);
      jj_consume_token(LITERALS);
      jj_consume_token(PAR_F);
      jj_consume_token(EOL);
    } finally {
      trace_return("OUT");
    }
  }

//Funções da estrutura while
  final public void WHILE() throws ParseException {
    trace_call("WHILE");
    try {
      jj_consume_token(WHILE);
      jj_consume_token(PAR_A);
      EXPB();
      jj_consume_token(PAR_F);
      jj_consume_token(CHA_A);
      COMANDOS();
      jj_consume_token(CHA_F);
    } finally {
      trace_return("WHILE");
    }
  }

//Funções da estrutura switch
  final public void CASE() throws ParseException {
    trace_call("CASE");
    try {
      jj_consume_token(CASE);
      jj_consume_token(VALUES);
      jj_consume_token(CHA_A);
      COMANDOS();
      jj_consume_token(BREAK);
      jj_consume_token(EOL);
      jj_consume_token(CHA_F);
    } finally {
      trace_return("CASE");
    }
  }

  final public void SWITCH() throws ParseException {
    trace_call("SWITCH");
    try {
      jj_consume_token(SWITCH);
      jj_consume_token(PAR_A);
      jj_consume_token(LITERALS);
      jj_consume_token(PAR_F);
      jj_consume_token(CHA_A);
      COMANDOS();
      jj_consume_token(CHA_F);
    } finally {
      trace_return("SWITCH");
    }
  }

//Funções para funcoes
  final public void CALLF() throws ParseException {
    trace_call("CALLF");
    try {
      jj_consume_token(ARR);
      jj_consume_token(FUNCTION);
      jj_consume_token(DOT);
      jj_consume_token(LITERALS);
      jj_consume_token(PAR_A);
      jj_consume_token(LITERALS);
      jj_consume_token(PAR_F);
      jj_consume_token(EOL);
    } finally {
      trace_return("CALLF");
    }
  }

  final public void FUNCTION() throws ParseException {
    trace_call("FUNCTION");
    try {
      jj_consume_token(FUNCTION);
      jj_consume_token(LITERALS);
      jj_consume_token(PAR_A);
      jj_consume_token(LITERALS);
      jj_consume_token(PAR_F);
      jj_consume_token(CHA_A);
      COMANDOS();
      jj_consume_token(CHA_F);
    } finally {
      trace_return("FUNCTION");
    }
  }

//Funções para abertura de arquivos
  final public void FOPEN() throws ParseException {
    trace_call("FOPEN");
    try {
      jj_consume_token(FOPEN);
      jj_consume_token(PAR_A);
      jj_consume_token(LITERALS);
      jj_consume_token(PAR_F);
      jj_consume_token(EOL);
    } finally {
      trace_return("FOPEN");
    }
  }

  /** Generated Token Manager. */
  public MainTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[19];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xee1a0,0xee1a0,0x0,0x100000,0x100000,0x100000,0x100000,0x100000,0x1000000,0x1000000,0x1000000,0x2000000,0x1000000,0x1000000,0x1000000,0x1000000,0x0,0x400,0x200,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x4000e00,0x4000e00,0x8000000,0x2000000,0x2000000,0x8000000,0x8000000,0x0,0x30400000,0x30400000,0x18000000,0x0,0x18000000,0x18000000,0x18000000,0x18000000,0x40,0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public Main(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Main(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new MainTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Main(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new MainTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Main(MainTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(MainTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      trace_token(token, "");
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
      trace_token(token, " (in getNextToken)");
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[62];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 19; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 62; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  private int trace_indent = 0;
  private boolean trace_enabled = true;

/** Enable tracing. */
  final public void enable_tracing() {
    trace_enabled = true;
  }

/** Disable tracing. */
  final public void disable_tracing() {
    trace_enabled = false;
  }

  private void trace_call(String s) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Call:   " + s);
    }
    trace_indent = trace_indent + 2;
  }

  private void trace_return(String s) {
    trace_indent = trace_indent - 2;
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Return: " + s);
    }
  }

  private void trace_token(Token t, String where) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Consumed token: <" + tokenImage[t.kind]);
      if (t.kind != 0 && !tokenImage[t.kind].equals("\"" + t.image + "\"")) {
        System.out.print(": \"" + t.image + "\"");
      }
      System.out.println(" at line " + t.beginLine + " column " + t.beginColumn + ">" + where);
    }
  }

  private void trace_scan(Token t1, int t2) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Visited token: <" + tokenImage[t1.kind]);
      if (t1.kind != 0 && !tokenImage[t1.kind].equals("\"" + t1.image + "\"")) {
        System.out.print(": \"" + t1.image + "\"");
      }
      System.out.println(" at line " + t1.beginLine + " column " + t1.beginColumn + ">; Expected token: <" + tokenImage[t2] + ">");
    }
  }

}
