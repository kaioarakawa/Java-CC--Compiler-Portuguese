/* Generated By:JavaCC: Do not edit this line. ERs.java */
import java.io.FileInputStream;
import java.io.File;
import java.io.IOException;

public class ERs implements ERsConstants {
  public static void main(String args []) throws ParseException
  {
    try
    {
      System.out.println("Lendo arquivo fonte...");
      FileInputStream fis = new FileInputStream(new File("..//JavaCC//src//fonte.txt"));
      ERs parser = new ERs(fis);
      parser.Start();
      System.out.println("Arquivo fonte processado corretamente!");
    }
    catch (IOException e)
    {
      System.out.println("Falha ao abrir arquivo fonte.");
      System.exit(0);
    }
  }

  final public void Start() throws ParseException {
    trace_call("Start");
    try {
      COMANDOS();
      jj_consume_token(0);
    } finally {
      trace_return("Start");
    }
  }

  final public void COMANDOS() throws ParseException {
    trace_call("COMANDOS");
    try {
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SAIDA:
        case ENTRADA:
        case JOGALA:
        case WHILE:
        case SWITCH:
        case FOR:
        case IF:
        case FUNCAO:
        case VAR:
        case UNIQUE:
        case MANY:
        case THIS:
        case TIPO:
        case LITERALS:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case WHILE:
          WHILE();
          break;
        case SAIDA:
          Saida();
          break;
        case IF:
          IF();
          break;
        case SWITCH:
          SWITCH();
          break;
        case UNIQUE:
        case MANY:
          COMENTARIO();
          break;
        case THIS:
          ChamadaDeProced();
          break;
        case FUNCAO:
          Procedimento();
          break;
        case TIPO:
          atribu();
          break;
        case FOR:
          FOR();
          break;
        case LITERALS:
          expreArit();
          break;
        case VAR:
          VARDUMP();
          break;
        case ENTRADA:
          VAISEGURANDO();
          break;
        case JOGALA:
          ARQENTRY();
          break;
        default:
          jj_la1[1] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
      trace_return("COMANDOS");
    }
  }

  final public void COMENTARIO() throws ParseException {
    trace_call("COMENTARIO");
    try {
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case UNIQUE:
          jj_consume_token(UNIQUE);
          break;
        case MANY:
          jj_consume_token(MANY);
          break;
        default:
          jj_la1[2] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case UNIQUE:
        case MANY:
          ;
          break;
        default:
          jj_la1[3] = jj_gen;
          break label_2;
        }
      }
    } finally {
      trace_return("COMENTARIO");
    }
  }

  final public void ELSEIF() throws ParseException {
    trace_call("ELSEIF");
    try {
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PARENTEA:
          ;
          break;
        default:
          jj_la1[4] = jj_gen;
          break label_3;
        }
        jj_consume_token(PARENTEA);
        ExpreBool();
        jj_consume_token(PARENTEF);
        jj_consume_token(ABREC);
        COMANDOS();
        jj_consume_token(FECHAC);
      }
    } finally {
      trace_return("ELSEIF");
    }
  }

  final public void IF() throws ParseException {
    trace_call("IF");
    try {
      jj_consume_token(IF);
      ELSEIF();
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ELSEIF:
          ;
          break;
        default:
          jj_la1[5] = jj_gen;
          break label_4;
        }
        jj_consume_token(ELSEIF);
        ELSEIF();
      }
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ELSE:
          ;
          break;
        default:
          jj_la1[6] = jj_gen;
          break label_5;
        }
        jj_consume_token(ELSE);
        jj_consume_token(ABREC);
        COMANDOS();
        jj_consume_token(FECHAC);
      }
    } finally {
      trace_return("IF");
    }
  }

  final public void Saida() throws ParseException {
    trace_call("Saida");
    try {
      jj_consume_token(SAIDA);
      jj_consume_token(PARENTEA);
      jj_consume_token(LITERALS);
      jj_consume_token(PARENTEF);
      jj_consume_token(EOL);
    } finally {
      trace_return("Saida");
    }
  }

  final public void ChamadaDeProced() throws ParseException {
    trace_call("ChamadaDeProced");
    try {
      jj_consume_token(THIS);
      jj_consume_token(PONTO);
      jj_consume_token(FUNCAO);
      jj_consume_token(PONTO);
      jj_consume_token(LITERALS);
      jj_consume_token(PARENTEA);
      jj_consume_token(LITERALS);
      jj_consume_token(PARENTEF);
      jj_consume_token(EOL);
    } finally {
      trace_return("ChamadaDeProced");
    }
  }

  final public void Procedimento() throws ParseException {
    trace_call("Procedimento");
    try {
      jj_consume_token(FUNCAO);
      jj_consume_token(LITERALS);
      jj_consume_token(PARENTEA);
      jj_consume_token(LITERALS);
      jj_consume_token(PARENTEF);
      jj_consume_token(ABREC);
      COMANDOS();
      jj_consume_token(FECHAC);
    } finally {
      trace_return("Procedimento");
    }
  }

  final public void atribu() throws ParseException {
    trace_call("atribu");
    try {
      jj_consume_token(TIPO);
      jj_consume_token(LITERALS);
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VIRGULA:
        case ATRI:
          ;
          break;
        default:
          jj_la1[7] = jj_gen;
          break label_6;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VIRGULA:
          jj_consume_token(VIRGULA);
          atribuRacio();
          break;
        case ATRI:
          jj_consume_token(ATRI);
          AtribuBOOL();
          break;
        default:
          jj_la1[8] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(EOL);
    } finally {
      trace_return("atribu");
    }
  }

  final public void atribuRacio() throws ParseException {
    trace_call("atribuRacio");
    try {
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LITERALS:
          jj_consume_token(LITERALS);
          break;
        case VIRGULA:
          jj_consume_token(VIRGULA);
          atribuRacio();
          break;
        default:
          jj_la1[9] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VIRGULA:
        case LITERALS:
          ;
          break;
        default:
          jj_la1[10] = jj_gen;
          break label_7;
        }
      }
    } finally {
      trace_return("atribuRacio");
    }
  }

  final public void AtribuBOOL() throws ParseException {
    trace_call("AtribuBOOL");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VALUES:
        jj_consume_token(VALUES);
        break;
      case BOOL:
        jj_consume_token(BOOL);
        break;
      case RACIO:
        jj_consume_token(RACIO);
        break;
      case ASPTRING:
        jj_consume_token(ASPTRING);
        label_8:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case VIRGULA:
            ;
            break;
          default:
            jj_la1[11] = jj_gen;
            break label_8;
          }
          jj_consume_token(VIRGULA);
          jj_consume_token(LITERALS);
          jj_consume_token(ATRI);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case VALUES:
            jj_consume_token(VALUES);
            break;
          case BOOL:
            jj_consume_token(BOOL);
            break;
          case RACIO:
            jj_consume_token(RACIO);
            break;
          case ASPTRING:
            jj_consume_token(ASPTRING);
            break;
          default:
            jj_la1[12] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        break;
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("AtribuBOOL");
    }
  }

  final public void expreArit() throws ParseException {
    trace_call("expreArit");
    try {
      jj_consume_token(LITERALS);
      jj_consume_token(ATRI);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VALUES:
        jj_consume_token(VALUES);
        break;
      case RACIO:
        jj_consume_token(RACIO);
        break;
      case LITERALS:
        jj_consume_token(LITERALS);
        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OP:
          ;
          break;
        default:
          jj_la1[15] = jj_gen;
          break label_9;
        }
        jj_consume_token(OP);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VALUES:
          jj_consume_token(VALUES);
          break;
        case RACIO:
          jj_consume_token(RACIO);
          break;
        case LITERALS:
          jj_consume_token(LITERALS);
          break;
        default:
          jj_la1[16] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(EOL);
    } finally {
      trace_return("expreArit");
    }
  }

  final public void ExpreBool() throws ParseException {
    trace_call("ExpreBool");
    try {
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case RACIO:
        case LITERALS:
        case VALUES:
          ;
          break;
        default:
          jj_la1[17] = jj_gen;
          break label_10;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VALUES:
          jj_consume_token(VALUES);
          break;
        case RACIO:
          jj_consume_token(RACIO);
          break;
        case LITERALS:
          jj_consume_token(LITERALS);
          break;
        default:
          jj_la1[18] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(LOL);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VALUES:
          jj_consume_token(VALUES);
          break;
        case RACIO:
          jj_consume_token(RACIO);
          break;
        case LITERALS:
          jj_consume_token(LITERALS);
          break;
        default:
          jj_la1[19] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
      trace_return("ExpreBool");
    }
  }

  final public void FOR() throws ParseException {
    trace_call("FOR");
    try {
      jj_consume_token(FOR);
      jj_consume_token(PARENTEA);
      atribu();
      ExpreBool();
      jj_consume_token(VIRGULA);
      expreArit();
      jj_consume_token(PARENTEF);
      jj_consume_token(ABREC);
      COMANDOS();
      jj_consume_token(FECHAC);
    } finally {
      trace_return("FOR");
    }
  }

  final public void WHILE() throws ParseException {
    trace_call("WHILE");
    try {
      jj_consume_token(WHILE);
      jj_consume_token(PARENTEA);
      ExpreBool();
      jj_consume_token(PARENTEF);
      jj_consume_token(ABREC);
      COMANDOS();
      jj_consume_token(FECHAC);
    } finally {
      trace_return("WHILE");
    }
  }

  final public void CASE() throws ParseException {
    trace_call("CASE");
    try {
      jj_consume_token(CASE);
      jj_consume_token(VALUES);
      jj_consume_token(ABREC);
      COMANDOS();
      jj_consume_token(BREAK);
      jj_consume_token(EOL);
      jj_consume_token(FECHAC);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CASE:
        CASE();
        break;
      default:
        jj_la1[20] = jj_gen;
        ;
      }
    } finally {
      trace_return("CASE");
    }
  }

  final public void SWITCH() throws ParseException {
    trace_call("SWITCH");
    try {
      jj_consume_token(SWITCH);
      jj_consume_token(PARENTEA);
      jj_consume_token(LITERALS);
      jj_consume_token(PARENTEF);
      jj_consume_token(ABREC);
      CASE();
      jj_consume_token(FECHAC);
    } finally {
      trace_return("SWITCH");
    }
  }

  final public void VARDUMP() throws ParseException {
    trace_call("VARDUMP");
    try {
      jj_consume_token(VAR);
      jj_consume_token(PARENTEA);
      jj_consume_token(LITERALS);
      jj_consume_token(PARENTEF);
      jj_consume_token(EOL);
    } finally {
      trace_return("VARDUMP");
    }
  }

  final public void ARQENTRY() throws ParseException {
    trace_call("ARQENTRY");
    try {
      jj_consume_token(JOGALA);
      jj_consume_token(PARENTEA);
      jj_consume_token(LITERALS);
      jj_consume_token(ATRI);
      jj_consume_token(LITERALS);
      jj_consume_token(PONTO);
      jj_consume_token(TXT);
      jj_consume_token(PARENTEF);
      jj_consume_token(EOL);
    } finally {
      trace_return("ARQENTRY");
    }
  }

  final public void VAISEGURANDO() throws ParseException {
    trace_call("VAISEGURANDO");
    try {
      jj_consume_token(ENTRADA);
      jj_consume_token(PARENTEA);
      jj_consume_token(LITERALS);
      jj_consume_token(PARENTEF);
      jj_consume_token(EOL);
    } finally {
      trace_return("VAISEGURANDO");
    }
  }

  /** Generated Token Manager. */
  public ERsTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[21];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x133e0,0x133e0,0x0,0x0,0x0,0x8000,0x4000,0x20000,0x20000,0x20000,0x20000,0x20000,0x400000,0x400000,0x400000,0x800000,0x400000,0x400000,0x400000,0x400000,0x400,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x4001b04,0x4001b04,0x300,0x300,0x20,0x0,0x0,0x2000000,0x2000000,0x4000000,0x4000000,0x0,0x18400000,0x18400000,0xc000000,0x0,0xc000000,0xc000000,0xc000000,0xc000000,0x0,};
   }

  /** Constructor with InputStream. */
  public ERs(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ERs(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ERsTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public ERs(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ERsTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public ERs(ERsTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ERsTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      trace_token(token, "");
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
      trace_token(token, " (in getNextToken)");
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[61];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 21; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 61; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  private int trace_indent = 0;
  private boolean trace_enabled = true;

/** Enable tracing. */
  final public void enable_tracing() {
    trace_enabled = true;
  }

/** Disable tracing. */
  final public void disable_tracing() {
    trace_enabled = false;
  }

  private void trace_call(String s) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Call:   " + s);
    }
    trace_indent = trace_indent + 2;
  }

  private void trace_return(String s) {
    trace_indent = trace_indent - 2;
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Return: " + s);
    }
  }

  private void trace_token(Token t, String where) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Consumed token: <" + tokenImage[t.kind]);
      if (t.kind != 0 && !tokenImage[t.kind].equals("\"" + t.image + "\"")) {
        System.out.print(": \"" + t.image + "\"");
      }
      System.out.println(" at line " + t.beginLine + " column " + t.beginColumn + ">" + where);
    }
  }

  private void trace_scan(Token t1, int t2) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Visited token: <" + tokenImage[t1.kind]);
      if (t1.kind != 0 && !tokenImage[t1.kind].equals("\"" + t1.image + "\"")) {
        System.out.print(": \"" + t1.image + "\"");
      }
      System.out.println(" at line " + t1.beginLine + " column " + t1.beginColumn + ">; Expected token: <" + tokenImage[t2] + ">");
    }
  }

}
